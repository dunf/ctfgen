import sys
from collections import OrderedDict
from src.data import *
from src.helpers impotr debug_yaml

class Vulnerability(object):
    def __init__(self, name, ansible_group, vuln_template, requirements, vuln_resource=None):
        self.name = name
        self.ansible_group = ansible_group
        self.vuln_template = vuln_template
        self.requirements = requirements
        self.vuln_resource = vuln_resource

        if name in ansible_vulnerability_roles.keys():
            vuln_data = ansible_vulnerability_roles.get(name)
            vuln_name_dsl = vuln_data['name']

            if not self.is_already_added(name, self.requirements):
                self.requirements.insert(len(self.requirements), vuln_data)
            
            role = OrderedDict({
                'name': 'Installing vulnerability {}'.format(vuln_name_dsl),
                'include_role': {
                    'name': str(vuln_name_dsl)
                }
            })
        
            if vuln_resource is not None:
                pass
                # TODO Fix this

            n = len(self.vuln_template[0]['tasks'])
            self.vuln_template[0]['tasks'].insert(n, role)

        else:
            print('Error! Vulnerability {} is unsupported'.format(name))
            sys.exit(1)

    def is_already_added(self, vuln, req):
        for v in self.requirements:
            return True if vuln in v['name'] else continue
        return False
    
    def get_file(self):
        return self.vuln_template

    def get_requirements(self):
        return self.requirements